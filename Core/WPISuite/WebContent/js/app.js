// Generated by CoffeeScript 1.7.1
(function() {
  var PlanningPokerViewModel, SessionViewModel,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  PlanningPokerViewModel = (function() {
    function PlanningPokerViewModel() {
      this.planningPokerSessions = ko.observableArray([]);
      this.requirements = [];
      this.team = [];
      this.activeSession = ko.observable();
      $.ajax({
        dataType: 'json',
        url: 'API/planningpoker/planningpokersession',
        async: false,
        success: (function(_this) {
          return function(data) {
            var session, _i, _len, _results;
            _results = [];
            for (_i = 0, _len = data.length; _i < _len; _i++) {
              session = data[_i];
              _results.push(_this.planningPokerSessions.push(new SessionViewModel(session, _this)));
            }
            return _results;
          };
        })(this)
      });
      $.ajax({
        dataType: 'json',
        url: 'API/requirementmanager/requirement',
        async: false,
        success: (function(_this) {
          return function(data) {
            var requirement, _i, _len;
            for (_i = 0, _len = data.length; _i < _len; _i++) {
              requirement = data[_i];
              requirement['voteValue'] = 0;
            }
            return _this.requirements = data;
          };
        })(this)
      });
      $.ajax({
        dataType: 'json',
        url: 'API/core/user',
        async: false,
        success: (function(_this) {
          return function(data) {
            return _this.team = data;
          };
        })(this)
      });
      this.setActiveSession = (function(_this) {
        return function(session) {
          return _this.activeSession(session);
        };
      })(this);
      this.requirementsForSession = (function(_this) {
        return function(session) {
          var requirement, result, _i, _len, _ref, _ref1;
          result = [];
          _ref = _this.requirements;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            requirement = _ref[_i];
            if (_ref1 = requirement['id'], __indexOf.call(session.requirementIDs(), _ref1) >= 0) {
              result.push(requirement);
            }
          }
          return result;
        };
      })(this);
      this.widthPercent = function(session, requirementID) {
        var estimate, numVotes, percent, _i, _len, _ref;
        numVotes = 0;
        _ref = session.estimates();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          estimate = _ref[_i];
          if (parseInt(estimate['requirementID']) === parseInt(requirementID)) {
            numVotes++;
          }
        }
        percent = 0;
        if (this.team.length > 0) {
          percent = parseInt((numVotes / this.team.length) * 100);
        }
        return "" + percent + "%";
      };
      this.submitVote = function(voteValue, requirementID, session) {
        var estimate, vote;
        vote = parseInt(voteValue);
        estimate = {
          sessionID: session.uuid(),
          requirementID: requirementID,
          vote: vote
        };
        return $.ajax({
          type: 'POST',
          dataType: 'json',
          url: 'API/Advanced/planningpoker/planningpokersession/update-estimate-website',
          data: JSON.stringify(estimate),
          success: (function(_this) {
            return function(data) {
              return console.log('We did it!');
            };
          })(this),
          error: (function(_this) {
            return function() {
              return console.log('Error updating the estimate');
            };
          })(this)
        });
      };
    }

    return PlanningPokerViewModel;

  })();

  SessionViewModel = (function() {
    function SessionViewModel(data, parent) {
      var field, value;
      this.parent = parent;
      for (field in data) {
        value = data[field];
        this[field] = ko.observable(value);
      }
    }

    return SessionViewModel;

  })();

  $(function() {
    window.PokerVM = new PlanningPokerViewModel();
    return ko.applyBindings(window.PokerVM);
  });

}).call(this);
