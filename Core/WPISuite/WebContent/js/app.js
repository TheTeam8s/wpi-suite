// Generated by CoffeeScript 1.7.1
(function() {
  var CardViewModel, EstimateViewModel, PlanningPokerViewModel, SessionViewModel,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  PlanningPokerViewModel = (function() {
    function PlanningPokerViewModel() {
      this.planningPokerSessions = ko.observableArray([]);
      this.requirements = [];
      this.team = [];
      this.activeSession = ko.observable();
      this.username = window.location.search.split('=')[1];
      $.ajax({
        dataType: 'json',
        url: 'API/requirementmanager/requirement',
        async: false,
        success: (function(_this) {
          return function(data) {
            var requirement, _i, _len;
            for (_i = 0, _len = data.length; _i < _len; _i++) {
              requirement = data[_i];
              requirement['voteValue'] = 0;
            }
            return _this.requirements = data;
          };
        })(this)
      });
      $.ajax({
        dataType: 'json',
        url: 'API/core/user',
        async: false,
        success: (function(_this) {
          return function(data) {
            return _this.team = data;
          };
        })(this)
      });
      $.ajax({
        dataType: 'json',
        url: 'API/planningpoker/planningpokersession',
        async: false,
        success: (function(_this) {
          return function(data) {
            var params, session, _i, _len, _results;
            _results = [];
            for (_i = 0, _len = data.length; _i < _len; _i++) {
              session = data[_i];
              params = {
                requirements: _this.requirements,
                team: _this.team,
                username: _this.username
              };
              _results.push(_this.planningPokerSessions.push(new SessionViewModel(session, params)));
            }
            return _results;
          };
        })(this)
      });
      this.openSessions = ko.computed((function(_this) {
        return function() {
          return _this.planningPokerSessions().filter(function(session) {
            return session.gameState() === 'OPEN';
          });
        };
      })(this));
      this.setActiveSession = (function(_this) {
        return function(session) {
          return _this.activeSession(session);
        };
      })(this);
    }

    return PlanningPokerViewModel;

  })();

  SessionViewModel = (function() {
    function SessionViewModel(data, params) {
      var estimate, field, reqEstimates, requirement, user, value, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _ref3;
      this.parent = parent;
      this.allRequirements = ko.observableArray(params.requirements);
      this.team = ko.observableArray(params.team);
      this.username = params.username;
      this.params = params;
      for (field in data) {
        value = data[field];
        this[field] = ko.observable(value);
      }
      this.params = params;
      this.params['usingDeck'] = this.isUsingDeck();
      this.params['deck'] = {};
      if (this.isUsingDeck()) {
        this.params['deck'] = this.sessionDeck();
      }
      this.requirementEstimates = ko.observableArray([]);
      _ref = this.allRequirements();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        requirement = _ref[_i];
        if (_ref1 = requirement['id'], __indexOf.call(this.requirementIDs(), _ref1) >= 0) {
          reqEstimates = [];
          _ref2 = this.team();
          for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
            user = _ref2[_j];
            reqEstimates[user['username']] = {
              sessionID: this.uuid(),
              requirementID: requirement['id'],
              ownerName: user['username'],
              vote: 0,
              isSaved: false
            };
          }
          _ref3 = this.estimates();
          for (_k = 0, _len2 = _ref3.length; _k < _len2; _k++) {
            estimate = _ref3[_k];
            if (estimate['requirementID'] === requirement['id']) {
              estimate['isSaved'] = true;
              reqEstimates[estimate['ownerName']] = estimate;
            }
          }
          this.requirementEstimates.push(new EstimateViewModel(reqEstimates, requirement, this.params));
        }
      }
      this.requirements = ko.computed((function(_this) {
        return function() {
          var result, _l, _len3, _ref4, _ref5;
          result = [];
          _ref4 = _this.allRequirements();
          for (_l = 0, _len3 = _ref4.length; _l < _len3; _l++) {
            requirement = _ref4[_l];
            if (_ref5 = requirement['id'], __indexOf.call(_this.requirementIDs(), _ref5) >= 0) {
              result.push(requirement);
            }
          }
          return result;
        };
      })(this));
    }

    return SessionViewModel;

  })();

  EstimateViewModel = (function() {
    function EstimateViewModel(estimatesObject, req, params) {
      var cardValue, estimate, key, observableEstimate, user, value, _i, _len, _ref;
      this.requirement = ko.observable(req);
      this.requirements = ko.observable(params.requirements);
      this.team = ko.observable(params.team);
      this.usingDeck = ko.observable(params.usingDeck);
      this.deck = ko.observable(params.deck);
      this.username = params.username;
      for (user in estimatesObject) {
        estimate = estimatesObject[user];
        observableEstimate = {};
        for (key in estimate) {
          value = estimate[key];
          observableEstimate[key] = ko.observable(value);
        }
        this[user] = ko.observable(observableEstimate);
      }
      if (this.usingDeck()) {
        this.cards = ko.observableArray([]);
        _ref = this.deck().numbersInDeck;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          cardValue = _ref[_i];
          this.cards.push(new CardViewModel(cardValue, false));
        }
      }
      this.voteValue = ko.observable(this[this.username]().vote());
      this.widthPercent = ko.computed((function(_this) {
        return function() {
          var numVotes, percent, _j, _len1, _ref1;
          numVotes = 0;
          _ref1 = _this.team();
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            user = _ref1[_j];
            if (_this[user['username']]().isSaved()) {
              numVotes++;
            }
          }
          percent = 0;
          if (_this.team().length > 0) {
            percent = parseInt((numVotes / _this.team().length) * 100);
          }
          return "" + percent + "%";
        };
      })(this));
      this.totalValue = ko.computed((function(_this) {
        return function() {
          var card, total, _j, _len1, _ref1;
          if (_this.usingDeck()) {
            total = 0;
            _ref1 = _this.cards();
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              card = _ref1[_j];
              if (card.selected()) {
                total += card.value();
              }
            }
            return total;
          } else {
            return _this.voteValue();
          }
        };
      })(this));
      this.submitVote = (function(_this) {
        return function() {
          _this[_this.username]().vote(parseInt(_this.voteValue()));
          return $.ajax({
            type: 'POST',
            dataType: 'json',
            url: 'API/Advanced/planningpoker/planningpokersession/update-estimate-website',
            data: ko.toJSON(_this[_this.username]()),
            success: function(data) {
              console.log('Vote successfully submitted');
              return _this[_this.username]().isSaved(true);
            },
            error: function() {
              return console.log('Error updating the estimate');
            }
          });
        };
      })(this);
    }

    return EstimateViewModel;

  })();

  CardViewModel = (function() {
    function CardViewModel(value, selected) {
      this.value = ko.observable(value);
      this.selected = ko.observable(selected);
      this.cardClicked = (function(_this) {
        return function() {
          if (_this.selected()) {
            return _this.selected(false);
          } else {
            return _this.selected(true);
          }
        };
      })(this);
    }

    return CardViewModel;

  })();

  $(function() {
    window.PokerVM = new PlanningPokerViewModel();
    return ko.applyBindings(window.PokerVM);
  });

}).call(this);
