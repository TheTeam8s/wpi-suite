// Generated by CoffeeScript 1.7.1
(function() {
  var PlanningPokerViewModel,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  PlanningPokerViewModel = (function() {
    function PlanningPokerViewModel() {
      this.planningPokerSessions = ko.observableArray([]);
      this.requirements = [];
      this.team = [];
      this.activeSession = ko.observable();
      $.ajax({
        dataType: 'json',
        url: 'API/planningpoker/planningpokersession',
        async: false,
        success: (function(_this) {
          return function(data) {
            _this.planningPokerSessions(ko.mapping.fromJS(data));
            return _this.planningPokerSessions(data);
          };
        })(this)
      });
      $.ajax({
        dataType: 'json',
        url: 'API/requirementmanager/requirement',
        async: false,
        success: (function(_this) {
          return function(data) {
            return _this.requirements = data;
          };
        })(this)
      });
      $.ajax({
        dataType: 'json',
        url: 'API/core/user',
        async: false,
        success: (function(_this) {
          return function(data) {
            return _this.team = data;
          };
        })(this)
      });
      this.setActiveSession = (function(_this) {
        return function(session) {
          return _this.activeSession(session);
        };
      })(this);
      this.requirementsForSession = (function(_this) {
        return function(session) {
          var requirement, result, _i, _len, _ref, _ref1;
          result = [];
          console.log(session);
          console.log(_this.requirements);
          _ref = _this.requirements;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            requirement = _ref[_i];
            if (_ref1 = requirement['id'], __indexOf.call(session['requirementIDs'], _ref1) >= 0) {
              result.push(requirement);
            }
          }
          return result;
        };
      })(this);
    }

    return PlanningPokerViewModel;

  })();

  $(function() {
    return ko.applyBindings(new PlanningPokerViewModel());
  });

}).call(this);
